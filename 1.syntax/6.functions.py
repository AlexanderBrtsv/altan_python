# *** Функции***

# Создание (определение) функции

# 1 вариант. 
# Функция, которая не принимает данные (нет аргументов)
# и ничего не возвращать

def func_1():
    var_1 = 10
    var_2 = 20
    res = var_1 + var_2
    print(res)

# вызов функции
# func_1()

# 2 вариант.
# Функция принимающая параметры (значения, данные) (обладает аргументами)
# и ничего не возвращающая

def func_2(arg_1):
    res = arg_1 ** 2
    print(res)

# func_2(10)

def func_3(a, b, c):
    res = a + b * c
    print(res)

# func_3(2, 3, 4) Позиционная передача параметров - позиции параметров соответсвуют позициям аргументов
# func_3(c = 3, a = 2, b = 6) именнованная передача параметров

# аргумент может иметь значение по умолчанию

def func_4(arg_1, arg_2 = 20):
    print(arg_1 * arg_2)

# func_4(3) #передача 1 аргумента, 2 аргумент по умолчанию
# func_4(3, 10) передача обоих аргументов

def func_5(a = 10, b = 20, c = 30):
    print(a + b * c)
# func_5()
# func_5(c = 1)
# func_5(1, 1)

# Передача произвольного количества параметров
# позиционные параметры
def func_6(*args):
    print(args)
    res = args[0] + args[3]
    print(res)
# func_6(4, 5, 6, 7, 1, 3)

# именнованные параметры
def func_7(**kwargs):
    print(kwargs)
    res = kwargs["val_1"] * kwargs["val_2"]
    print(res)
# func_7(val_1 = 10, val_2 = 20)

# 3 вариант.
# Функция возвращающая значение

def func_8(arg_1 = 80, arg_2 = 20):
    res = arg_1 // arg_2
    return res

# a = func_8()
# print(a)

def func_9(x, y):
    a = x * y
    b = x ** y
    return a, b

# print(func_9(2, 8))

var_1, var_2 = func_9(2, 8)
# print(var_1, var_2)

# *** Безымяная функуия (лямбда функция, лямбда выражение)***

# Особенности:
#  - всегда обладает аргументами
#  - всегда возвращает значение
#  - однострочная конструкция

my_lambda = lambda arg_1: arg_1 ** 3
# print(my_lambda(arg_1=10))

# Пример 1. Передача лямбды в функцию в качестве параметра
def func_10(f, a):
    res = f(a) #тут применяется лямбда
    print(res)

# func_10(lambda x: x * x, 100)

# Пример 2. Словарь лямбда выражений

my_lambdas = {
    "key_1": lambda arg_1, arg_2: arg_2 + arg_1,
    "key_2": lambda a, b, c: a + b * c
}

res =  my_lambdas["key_2"](10, 20, 30)
print(res)
res = my_lambdas["key_1"](2, 5)
print(res)